syntax on
set noerrorbells
set signcolumn=yes
set belloff=all
set clipboard+=unnamedplus
set tabstop=4 softtabstop=4
set shiftwidth=4
set nu
set rnu
set nolist
set expandtab
set autoindent
set nowrap
set backspace=indent,eol,start
set viminfo=
set nobackup
set nowritebackup
set noswapfile
set ignorecase
set smartcase
set incsearch
set scrolloff=4
set noshowmode
set splitright splitbelow
set termguicolors
set mouse=a
set encoding=UTF-8
set hidden
set cmdheight=1
set foldmethod=manual
"set nohlsearch
"set nocursorline
"set cc=80
"set cursorcolumn
"set statusline+=%F
"set updatetime=300
"set shortmess+=c

call plug#begin()
" IDE Features
Plug 'https://github.com/puremourning/vimspector.git' " Vimspector: Debugger
Plug 'https://github.com/pseewald/vim-anyfold.git'
Plug 'https://github.com/preservim/nerdtree.git' " NERDTree
Plug 'https://github.com/preservim/tagbar.git' " Tagbar: NOT WORKING
Plug 'https://github.com/kassio/neoterm.git' " Neoterm: Terminal Plugin
Plug 'preservim/nerdcommenter'
Plug 'neoclide/coc.nvim', {'branch': 'release'} " COC: Fix it
Plug 'psf/black', { 'tag': '19.10b0' } " Black: Python Autoformat
Plug 'Chiel92/vim-autoformat' " Autoformat
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Aesthetics
Plug 'junegunn/fzf.vim'
Plug 'navarasu/onedark.nvim'
Plug 'https://github.com/morhetz/gruvbox.git'
Plug 'https://github.com/tomasr/molokai.git'
Plug 'https://github.com/vim-airline/vim-airline.git' " Airline
Plug 'https://github.com/vim-airline/vim-airline-themes.git' " Airline Themes
Plug 'ryanoasis/vim-devicons'
" Add-ons
Plug 'vimwiki/vimwiki' " vimwiki
"Plug 'antoinemadec/coc-fzf' " NOT WORKING
call plug#end()

let g:onedark_config = {'style': 'darker'}
colorscheme onedark

" Set Leader Key
let mapleader = " "
nnoremap <leader>s :w<CR>:source %<CR>

" GENERAL
nnoremap <A-V> <C-V>
"let g:python3_host_prog = "/usr/bin/python3"
nnoremap <leader>/ :noh<CR>
tnoremap <Esc> <C-\><C-n>
nnoremap <C-U> 0<C-U>
nnoremap <C-D> 0<C-D>
" Buffers
nnoremap gb :bn<CR>
nnoremap gB :bp<CR>
nnoremap <leader>oo :bd! <CR>
nnoremap <leader>oa :%bd<CR>
nnoremap <leader>bl :Buffers<CR>

" DEVICONS
let g:webdevicons_enable = 1
if exists("g:loaded_webdevicons")
    call webdevicons#refresh()
endif

" Terminal
nnoremap <leader>ptr :vert T ipython<CR>
nnoremap <leader>ptb :botright T ipython<CR>
nnoremap <leader>pwr :vert Tnew<CR>
nnoremap <leader>pwb :botright Tnew<CR>

xnoremap <leader>l y<C-w>li <C-\><C-n>pi<CR>
xnoremap <leader>j y<C-w>ji <C-\><C-n>pi<CR>
nnoremap <leader>rpr :let @1 = expand("%")<CR><C-w>li%run <C-\><C-n>"1pi<CR><C-\><C-n><C-w>h 
nnoremap <leader>rpb :let @1 = expand("%")<CR><C-w>ji%run <C-\><C-n>"1pi<CR><C-\><C-n><C-w>k


nnoremap <leader>tt :Ttoggle<CR>

" ANYFOLD
filetype plugin indent on
autocmd Filetype * AnyFoldActivate
set foldlevel=99

" SPLITS
" Navigate Between Windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Resize Splits
" Make adjusing split sizes easier
noremap <silent> <C-Left> :vertical resize +2<CR>
noremap <silent> <C-Right> :vertical resize -2<CR>
noremap <silent> <C-Up> :resize -2<CR>
noremap <silent> <C-Down> :resize +2<CR>

" AUTOFORMAT
nnoremap <leader>af :Black<CR>

" AIRLINE
let g:airline#extensions#tabline#enabled = 1 " Possibly making this slow
let g:airline_powerline_fonts = 1

" FZF
nnoremap <leader>ff :Files<CR>

" COC
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Use <c-space> to trigger completion.
if has('nvim')
    inoremap <silent><expr> <C-z> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif
" Make <CR> auto-select the first completion item and notify coc.nvim to
" " format on enter, <cr> could be remapped by other vim plugin
" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
"                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
"
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" VIMSPECTOR
" Enable Preset Keybindings for Debug Terminal
let g:vimspector_enable_mappings = 'HUMAN'
" Start and stop vimspector
nnoremap <Leader>dd :call vimspector#Launch()<CR>
nnoremap <Leader>de :call vimspector#Reset()<CR>
nnoremap <Leader>dc :call vimspector#Continue()<CR>
" Toggle Breakpoints
nnoremap <Leader>dt :call vimspector#ToggleBreakpoint()<CR>
nnoremap <Leader>dT :call vimspector#ClearBreakpoints()<CR>
" Commands Debugging Mode
nmap <Leader>dk <Plug>VimspectorRestart
nmap <Leader>dh <Plug>VimspectorStepOut
nmap <Leader>dl <Plug>VimspectorStepInto
nmap <Leader>dj <Plug>VimspectorStepOver
nmap <Leader>di <Plug>VimspectorBalloonEval

" VIMWIKI
let g:vimwiki_list = [{'path': '~/vimwiki/',
            \ 'syntax': 'markdown', 'ext': '.md'}]
nmap <Leader>tl <Plug>VimwikiToggleListItem
vmap <Leader>tl <Plug>VimwikiToggleListItem

" NERDTree
let NERDTreeWinSize = 30
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap <A-j> ddp
nnoremap <A-k> ddkP
nnoremap <leader>eb :EditBookmarks
" NERDTRee Mark Bookmarks
nnoremap <leader>bm0 :Bookmark [0]<CR>
nnoremap <leader>bm1 :Bookmark [1]<CR>
nnoremap <leader>bm2 :Bookmark [2]<CR>
nnoremap <leader>bm3 :Bookmark [3]<CR>
nnoremap <leader>bm4 :Bookmark [4]<CR>
nnoremap <leader>bm5 :Bookmark [5]<CR>
nnoremap <leader>bm6 :Bookmark [6]<CR>
nnoremap <leader>bm7 :Bookmark [7]<CR>
nnoremap <leader>bm8 :Bookmark [8]<CR>
nnoremap <leader>bm9 :Bookmark [9]<CR>
" NERDTRee Open Bookmarks
nnoremap <leader>ob0 :OpenBookmark [0]<CR>
nnoremap <leader>ob1 :OpenBookmark [1]<CR>
nnoremap <leader>ob2 :OpenBookmark [2]<CR>
nnoremap <leader>ob3 :OpenBookmark [3]<CR>
nnoremap <leader>ob4 :OpenBookmark [4]<CR>
nnoremap <leader>ob5 :OpenBookmark [5]<CR>
nnoremap <leader>ob6 :OpenBookmark [6]<CR>
nnoremap <leader>ob7 :OpenBookmark [7]<CR>
nnoremap <leader>ob8 :OpenBookmark [8]<CR>
nnoremap <leader>ob9 :OpenBookmark [9]<CR>
" NERDTRee Clear Bookmarks
nnoremap <leader>cb0 :ClearBookmarks [0]<CR>
nnoremap <leader>cb1 :ClearBookmarks [1]<CR>
nnoremap <leader>cb2 :ClearBookmarks [2]<CR>
nnoremap <leader>cb3 :ClearBookmarks [3]<CR>
nnoremap <leader>cb4 :ClearBookmarks [4]<CR>
nnoremap <leader>cb5 :ClearBookmarks [5]<CR>
nnoremap <leader>cb6 :ClearBookmarks [6]<CR>
nnoremap <leader>cb7 :ClearBookmarks [7]<CR>
nnoremap <leader>cb8 :ClearBookmarks [8]<CR>
nnoremap <leader>cb9 :ClearBookmarks [9]<CR>

" Vimwiki
augroup filetype_vimwiki
    autocmd!
    autocmd Filetype vimwiki set wrap
    autocmd Filetype vimwiki set nonu
    autocmd FileType vimwiki set nornu
    autocmd Filetype vimwiki let b:coc_suggest_disable = 1
    autocmd FileType vimwiki nnoremap <leader><Tab> :VimwikiChangeSymbolTo -<CR>>>A
augroup END
